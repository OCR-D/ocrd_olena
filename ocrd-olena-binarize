#!/usr/bin/env bash
# shellcheck disable=SC2086

set -eu
set -o pipefail
# set -x

### binarization with Olena
# 
# Finds and downloads all files in the input fileGrp
# of the workspace. Then for each file, determines its
# MIME type: 
# If PAGE-XML, queries the input file for an existing
# AlternativeImage on the Page level, otherwise uses
# imageFilename. Passes the image file to the scribo
# binarization program for the chosen algorithm. The
# resulting file will reside in OCR-D-IMG-BIN and its
# ID will be derived from the input file's ID. Finally,
# adds a reference to the new file by appending some
# AlternativeImage to the PAGE-XML.
# If an image, creates a skeleton PAGE-XML for that
# imageFilename. Passes the image file to scribo
# likewise. Also adds a reference to the new file
# by inserting an AlternativeImage to the PAGE-XML.
# Regardless, adds new image and new PAGE-XML to METS.

which ocrd >/dev/null 2>/dev/null || { echo >&2 "ocrd not in \$PATH. Panicking"; exit 1; }
((BASH_VERSINFO<4 || BASH_VERSINFO==4 && BASH_VERSINFO[1]<4)) && echo >&2 "bash $BASH_VERSION is too old. Please install bash 4.4 or newer." && exit 1

SHAREDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"
FALLBACK_IMAGE_FILEGRP="OCR-D-IMG-BIN"
PRESERVE_NAMESPACE=1

MIMETYPE_PAGE=$(ocrd bashlib constants MIMETYPE_PAGE)
declare -A NAMESPACES
eval "NAMESPACES=( $(ocrd bashlib constants NAMESPACES) )"

# FIXME: add a bashlib wrapper for logging to use here
function log {
    echo >&2 "$(date +%T.%3N) $LEVEL ocrd-olena-binarize - $1"
}
function critical { LEVEL=CRITICAL log "$1"; }
function error { LEVEL=ERROR log "$1"; }
function warning { LEVEL=WARNING log "$1"; }
function info { LEVEL=INFO log "$1"; }
function debug { LEVEL=DEBUG log "$1"; }


function xywh_from_points {
    # FIXME: add a bashlib wrapper for utils (coordinate conversion) to use here
    minx=$((2**32))
    miny=$((2**32))
    maxx=0
    maxy=0
    for point in $*; do
        pointx=${point%,*}
        pointy=${point#*,}
        ((pointx < minx)) && minx=$pointx
        ((pointx > maxx)) && maxx=$pointx
        ((pointy < miny)) && miny=$pointy
        ((pointy > maxy)) && maxy=$pointy
    done
    echo $((maxx - minx)) $((maxy - miny)) $minx $miny
}

function iso8601_date () {
    date '+%FT%T'
}

function image_id_from_fpath {
    local image_in_fpath="$1" in_id="$2" in_pageId="$3"
    
    # find image ID representing the image file in METS
    # FIXME: extend `ocrd workspace find` with a filter option for FLocat to use here
    options=( sel
              -N "mets=${NAMESPACES[mets]}"
              -N "xlink=${NAMESPACES[xlink]}"
              -t -v "//mets:file[starts-with(@MIMETYPE,'image/') and ./mets:FLocat/@xlink:href='${image_in_fpath}']/@ID"
              "${ocrd__argv[mets_file]}" )
    if ! image_in_id=$(xmlstarlet "${options[@]}" | head -1); then
        warning "image URL '${image_in_fpath}' not referenced"\
                "in METS for input file ID=${in_id} (pageId=${in_pageId})"
        image_in_id="${in_id}-IMG" # fallback
    fi
    echo "$image_in_id"
}   

function modify_page {
    local namespace="$1" ns_prefix="$2" image_out_fpath="$3" out_fpath="$4" comments="$5"

    declare -a options
    # shellcheck disable=SC2016
    options+=( --no-doc-namespace ed --inplace
               -N "pc=${namespace}"
               # update LastChange date stemp:
               -u '/pc:PcGts/pc:Metadata/pc:LastChange'
               -v "$(iso8601_date)"
               # insert MetadataItem with runtime parameters:
               -s '/pc:PcGts/pc:Metadata'
               -t elem -n "${ns_prefix}MetadataItem"
               # bind previous element to "new-item":
               --var new-item '$prev'
               -s '$new-item' -t attr -n type
                              -v "processingStep"
               -s '$new-item' -t attr -n name
                              -v "preprocessing/optimization/binarization"
               -s '$new-item' -t attr -n value
                              -v "ocrd-olena-binarize"
               # add "Labels":
               -s '$new-item' -t elem -n "${ns_prefix}Labels"
               # bind previous element to "new-labels":
               --var new-labels '$prev' )
    for key in ${!params[@]}; do
        # shellcheck disable=SC2016
        options+=( # add another "Label":
                   -s '$new-labels' -t elem -n "${ns_prefix}Label"
                   # bind previous element to "new-label":
                   --var new-label '$prev'
                   -s '$new-label' -t attr -n value
                                   -v ${params[$key]}
                   -s '$new-label' -t attr -n type
                                   -v $key )
    done
    # insert/append AlternativeImage:
    if xmlstarlet --no-doc-namespace sel              \
                  -N "pc=${namespace}" --quiet       \
                  -t -v '/pc:PcGts/pc:Page/pc:AlternativeImage' \
                  "$out_fpath"; then
        # AlternativeImage exists: append after
        options+=( -a '/pc:PcGts/pc:Page/pc:AlternativeImage[last()]' )
    elif xmlstarlet --no-doc-namespace sel              \
                  -N "pc=${namespace}" --quiet       \
                  -t -v '/pc:PcGts/pc:Page/*'         \
                  "$out_fpath"; then
        # something exists: insert before
        options+=( -i '/pc:PcGts/pc:Page/*[1]' )
    else
        # nothing here yet: append subnode
        options+=( -s '/pc:PcGts/pc:Page' )
    fi
    # shellcheck disable=SC2016
    options+=( -t elem -n "${ns_prefix}AlternativeImage"
               --var new-image '$prev'
               -s '$new-image' -t attr -n filename
                               -v "$image_out_fpath"
               -s '$new-image' -t attr -n comments
                               -v "$comments"
                               "$out_fpath" )
    xmlstarlet "${options[@]}"
}

function process_pagefile {
    local in_fpath="$1" in_id="$2" in_pageId="$3" out_fpath="$4" out_id="$5" image_out_file_grp="$6"
    local image_in_fpath image_in_id image_out_fpath image_out_id comments
    
    if ((PRESERVE_NAMESPACE)); then
        # preserve namespace and prefix
        cat <"$in_fpath" >"$out_fpath"
    else
        # stylesheet transforms to standard namespace:
        cat <<EOF >convert-namespace.xsl
<?xml version="1.0" encoding="ISO-8859-1"?>
<xsl:stylesheet version="1.0"
  xmlns:xsl="${NAMESPACES[xsl]}"
  xmlns="${NAMESPACES[page]}">
  <xsl:output method="xml" version="1.0" 
    encoding="UTF-8" indent="yes"/>
  <xsl:template match="@*|text()|comment()|processing-instruction()">
    <xsl:copy/>
  </xsl:template>
  <xsl:template match="*">
    <xsl:element name="{local-name()}">
      <xsl:apply-templates select="@*|*"/>
    </xsl:element>
  </xsl:template>
</xsl:stylesheet>
EOF
        xmlstarlet tr convert-namespace.xsl <"$in_fpath" >"$out_fpath"
    fi

    # to become independent of whether and what
    # namespace prefix is used for PAGE-XML,
    # we first have to know the namespace:
    namespace=$(xmlstarlet sel -t -m '/*[1]' -v 'namespace-uri()' "$out_fpath")
    # now (using --no-doc-namespace) we can
    # safely query with -N pc=${namespace}
    # and safely add with prefix ${ns_prefix}:
    ns_prefix=$(xmlstarlet sel -t -m '/*[1]' -v 'substring-before(name(),"PcGts")' "$out_fpath"; true)
    
    declare -a options
    # find image file representing the page in PAGE
    if options=( --no-doc-namespace sel
                 -N "pc=${namespace}" -t 
                 -v '/pc:PcGts/pc:Page/pc:AlternativeImage[last()]/@filename' 
                 "$out_fpath" )
       image_in_fpath=$(xmlstarlet "${options[@]}"); then
        info "found AlternativeImage filename '${image_in_fpath}'"\
             "for input file ID=${in_id} (pageId=${in_pageId})"
        image_in_id=$(image_id_from_fpath "$image_in_fpath" "$in_id" "$in_pageId")
        image_in_fpath="${image_in_fpath#file://}"
        options=( --no-doc-namespace sel
                  -N "pc=${namespace}" -t 
                  -v '/pc:PcGts/pc:Page/pc:AlternativeImage[last()]/@comments' 
                  "$out_fpath" )
        comments=$(xmlstarlet "${options[@]}"),binarized
    else
        options=( --no-doc-namespace sel
                  -N "pc=${namespace}" -t
                  -v '/pc:PcGts/pc:Page/@imageFilename'
                  "$out_fpath" )
        image_in_fpath=$(xmlstarlet "${options[@]}")
        info "found imageFilename '${image_in_fpath}'"\
             "for input file ID=${in_id} (pageId=${in_pageId})"
        image_in_id=$(image_id_from_fpath "$image_in_fpath" "$in_id" "$in_pageId")
        image_in_fpath="${image_in_fpath#file://}"
        if options=( --no-doc-namespace sel
                     -N "pc=${namespace}" -t
                     -v '(/pc:PcGts/pc:Page/pc:Border|/pc:PcGts/pc:Page/pc:PrintSpace)/pc:Coords/@points'
                     "$out_fpath" )
           border=$(xmlstarlet "${options[@]}"); then
            debug "Using explicitly set page border '$border'"\
                  "for input file ID=${in_id} (pageId=${in_pageId})"
            local tmpfile
            tmpfile=$(mktemp --tmpdir ocrd-olena-binarize-cropped.XXXXXX)
            xywh_from_points $border | {
                read width height left top 
                convert "$image_in_fpath" -crop ${width}x${height}+${left}+${top} "$tmpfile"
            }
            image_in_fpath="$tmpfile"
            comments="cropped,binarized"
        else
            comments="binarized"
        fi
    fi

    # set output names
    image_out_id="${image_in_id}-BIN_${params[impl]}"
    image_out_fpath="${image_out_file_grp}/${image_out_id}.png"

    scribo-cli "${params[impl]}" "${image_in_fpath}" "${image_out_fpath}" "${scribo_options[@]}"
    
    # Add image file to METS
    ocrd workspace add        \
         --force              \
         -G ${image_out_file_grp}  \
         -g "$in_pageId"      \
         -m image/png         \
         -i "$image_out_id"   \
         "$image_out_fpath"

    # Reference image file in PAGE
    modify_page "$namespace" "$ns_prefix" "$image_out_fpath" "$out_fpath" "$comments"
    
    return 0
}

function process_imagefile {
    local in_fpath="$1" in_id="$2" in_pageId="$3" out_fpath="$4" out_id="$5" image_out_file_grp="$6"
    local image_out_fpath image_out_id

    image_out_id="${out_id}-BIN_${params[impl]}"
    image_out_fpath="${image_out_file_grp}/${image_out_id}.png"

    scribo-cli "${params[impl]}" "${in_fpath#file://}" "${image_out_fpath}" "${scribo_options[@]}"

    # Add image file to METS
    ocrd workspace add        \
         --force              \
         -G ${image_out_file_grp}  \
         -g "$in_pageId"      \
         -m image/png         \
         -i "$image_out_id"   \
         "$image_out_fpath"

    # Reference image file in PAGE
    # FIXME: add a bashlib wrapper for OcrdExif to use here
    imageInfo=($(identify "$in_fpath"))
    imageGeometry=${imageInfo[2]}
    imageWidth=${imageGeometry%x*}
    imageHeight=${imageGeometry#*x}
    # FIXME: add a bashlib wrapper for page_from_file to use here
    cat <<EOF > "$out_fpath"
<?xml version="1.0" encoding="UTF-8"?>
<PcGts xmlns:xsl="${NAMESPACES[xsl]}"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="${NAMESPACES[page]}"
  xsi:schemaLocation="${NAMESPACES[page]} ${NAMESPACES[page]}/pagecontent.xsd">
  <Metadata>
    <Creator>OCR-D/core $(versionstring=($(ocrd --version)); echo ${versionstring[-1]})</Creator>
    <Created>$(iso8601_date)</Created>
    <LastChange/>
  </Metadata>
  <Page imageFilename="${in_fpath#file://}" imageWidth="$imageWidth" imageHeight="$imageHeight" type="content"/>
</PcGts>
EOF
    modify_page "${NAMESPACES[page]}" "" "$image_out_fpath" "$out_fpath" "binarized"

    return 0
}
    
function main {
    # Load ocrd bashlib functions
    # shellcheck source=../core/ocrd/bashlib/lib.bash
    source $(ocrd bashlib filename)
    ocrd__wrap "$SHAREDIR/ocrd-tool.json" "ocrd-olena-binarize" "$@"

    scribo_options=(--enable-negate-output)
    case ${params[impl]} in
        otsu)
            : # has no options whatsoever
            ;;
        niblack)
            scribo_options+=(--disable-negate-input)
            ;& # fall through
        sauvola|kim|wolf|singh)
            scribo_options+=(--k ${params[k]})
            ;;& # get more
        sauvola-ms*)
            scribo_options+=(--all-k ${params[k]})
            ;;& # get more
        *)
            scribo_options+=(--win-size ${params[win-size]})
            ;;
    esac
    
    cd "${ocrd__argv[working_dir]}"
    page_id=${ocrd__argv[page_id]:-}
    in_file_grp=${ocrd__argv[input_file_grp]}
    out_file_grp=${ocrd__argv[output_file_grp]}
    page_out_file_grp=${out_file_grp%%,*}
    image_out_file_grp=${out_file_grp##*,}
    if [ x$image_out_file_grp = x$out_file_grp ];then
        image_out_file_grp=$FALLBACK_IMAGE_FILEGRP
        info "No output file group for images specified, falling back to '$image_out_file_grp'"
    fi
    mkdir -p $page_out_file_grp
    mkdir -p $image_out_file_grp

    local IFS=$'\n'
    files=($(ocrd workspace find     \
                  ${page_id:+-g} ${page_id:-} \
                  -G $in_file_grp    \
                  -k url             \
                  -k ID              \
                  -k mimetype        \
                  -k pageId          \
                  --download))
    local IFS=$' \t\n'
    local n=0 zeros=0000
    for csv in "${files[@]}"; do
        let n+=1
        # Parse comma separated fields
        local IFS=$'\t'
        local fields=($csv)
        local IFS=$' \t\n'

        local in_fpath="${fields[0]}"
        local in_id="${fields[1]}"
        local in_mimetype="${fields[2]}"
        local in_pageId="${fields[3]:-}"

        if ! test -f "${in_fpath#file://}"; then
           error "input file ID=${in_id} (pageId=${in_pageId} MIME=${in_mimetype}) is not on disk"
           continue
        fi 

        local out_id="${in_id//$in_file_grp/$page_out_file_grp}"
        if [ "x$out_id" = "x$in_id" ]; then
            out_id=${page_out_file_grp}_${zeros:0:$((4-${#n}))}$n
        fi
        local out_fpath="$page_out_file_grp/${out_id}.xml"

        if [ "x${in_mimetype}" = x${MIMETYPE_PAGE} ]; then
            info "processing PAGE-XML input file $in_id ($in_pageId)"
            process_pagefile "$in_fpath" "$in_id" "$in_pageId" "$out_fpath" "$out_id" "$image_out_file_grp"
        elif [ "${in_mimetype}" != "${in_mimetype#image/}" ]; then
            info "processing $in_mimetype input file $in_id ($in_pageId)"
            process_imagefile "$in_fpath" "$in_id" "$in_pageId" "$out_fpath" "$out_id" "$image_out_file_grp"
        else
            error "input file ID=${in_id} (pageId=${in_pageId} MIME=${in_mimetype}) is neither an image nor a PAGE-XML file"
            continue
        fi

        # Add PAGE file to METS
        declare -a options
        if [ -n "$in_pageId" ]; then
            options=( -g $in_pageId )
        else
            options=()
        fi
        options+=( -G $page_out_file_grp
                   -m $MIMETYPE_PAGE
                   -i "$out_id"
                   "$out_fpath" )
        ocrd workspace add "${options[@]}"
    done
}


main "$@"
